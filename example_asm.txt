// this is a code section
.text

// my function
my_funct:
  // set up stack space
  addi    sp, sp, -12

  // Copy contents of *a3
  // into registers a0, a1, a2
  lw      a0, 0(a3)
  lw      a1, 4(a3)
  lw      a2, 8(a3)

  // Copy a0, a1, a2
  // into stack
  sw      0(sp), a0
  sw      4(sp), a1
  sw      8(sp), a2

  // load word some_data[1] into a0
  la      a3, some_data
  lw      a0, 4(a3)

  // restore stack pointer
  addi    sp, sp, 12

  // return
  jalr zero, ra

print_stuff:
  addi a0, zero, 67 // lol six seven
  addi a1, zero, 94

0: // start loop
  printc a0 // print the char
  addi a0, a0, 1 // increment a0
  
  blt a0, a1, 0b // backwards jump if a0 < a1

  // otherwise, done

  
  // return
  jalr zero, ra

main:
  addi sp, sp, -12 // push 12 bytes of stack space
  sw 8(sp), ra // store the return address

  // store these two variables on the stack
  addi a0, zero, 0
  sw 0(sp), a0
  addi a1, zero, 3
  sw 4(sp), a1

0: // start loop
  jal ra, print_stuff // call this function

  // reload these two variables
  lw a0, 0(sp)
  lw a1, 4(sp)

  addi a0, a0, 1 // increment a0
  sw 0(sp), a0 // and store it just in case

  blt a0, a1, 0b // backwards jump if a0 < a1

  lw ra, 8(sp) // load the return address
  jalr zero, ra // return


// this is a data section
.data

// declare word[2] some_data { 0xA, 0xBBBB }
some_data:
  .word 0xA, 0xBBBB
